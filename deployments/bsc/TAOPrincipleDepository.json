{
  "address": "0x8E4BE6ec6bA8C76c7Dc6c80Bb4858aC5BBcED3f4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAOShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAOWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LPShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RewardPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit_",
          "type": "uint256"
        }
      ],
      "name": "calculateBondInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_interestDue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor_",
          "type": "address"
        }
      ],
      "name": "calculatePendingPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pendingPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor_",
          "type": "address"
        }
      ],
      "name": "calculatePercentVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_percentVested",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculatePremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit_",
          "type": "uint256"
        }
      ],
      "name": "depositBondPrinciple",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositBondPrincipleWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositorInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principleValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutRemaining",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositorAddress_",
          "type": "address"
        }
      ],
      "name": "getDepositorInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_principleValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutRemaining",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "principleToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "TAO_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principleToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemBond",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bondCalculator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingContract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "RewardPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "DAOWallet_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "DAOShare_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "LPShare_",
          "type": "uint256"
        }
      ],
      "name": "setAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondControlVariable_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingPeriodInBlocks_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPremium_",
          "type": "uint256"
        }
      ],
      "name": "setBondTerms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriodInBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fc6e0c9ee7cd888f4e755f06948b399f55f489860b77ab12afe69e7c852120a",
  "receipt": {
    "to": null,
    "from": "0xcc77159E0C7ca174672a84794Dfed8AA2E52c072",
    "contractAddress": "0x8E4BE6ec6bA8C76c7Dc6c80Bb4858aC5BBcED3f4",
    "transactionIndex": 123,
    "gasUsed": "1553017",
    "logsBloom": "0x
    "blockHash": "0xdfcdc02001f8bcb1bfcd19e04bfd9d98fb2cfa6687e877c5af9338c6ff8d56f0",
    "transactionHash": "0x0fc6e0c9ee7cd888f4e755f06948b399f55f489860b77ab12afe69e7c852120a",
    "logs": [
      {
        "transactionIndex": 123,
        "blockNumber": 7072932,
        "transactionHash": "0x0fc6e0c9ee7cd888f4e755f06948b399f55f489860b77ab12afe69e7c852120a",
        "address": "0x8E4BE6ec6bA8C76c7Dc6c80Bb4858aC5BBcED3f4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc77159e0c7ca174672a84794dfed8aa2e52c072"
        ],
        "data": "0x",
        "logIndex": 335,
        "blockHash": "0xdfcdc02001f8bcb1bfcd19e04bfd9d98fb2cfa6687e877c5af9338c6ff8d56f0"
      }
    ],
    "blockNumber": 7072932,
    "cumulativeGasUsed": "18016111",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "655617fea8a064d9290fa3c2991f9de6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAOShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit_\",\"type\":\"uint256\"}],\"name\":\"calculateBondInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestDue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"calculatePendingPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"calculatePercentVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentVested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit_\",\"type\":\"uint256\"}],\"name\":\"depositBondPrinciple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositBondPrincipleWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principleValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress_\",\"type\":\"address\"}],\"name\":\"getDepositorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_principleValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"principleToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TAO_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondCalculator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"RewardPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAOWallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DAOShare_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPShare_\",\"type\":\"uint256\"}],\"name\":\"setAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondControlVariable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriodInBlocks_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPremium_\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bonding/TAOPrincipleDepository.sol\":\"TAOPrincipleDepository\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Bonding/TAOPrincipleDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.4;\\r\\n\\r\\ninterface IOwnable {\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function transferOwnership( address newOwner_ ) external;\\r\\n}\\r\\n\\r\\ncontract Ownable is IOwnable {\\r\\n\\r\\n    address internal _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred( address(0), _owner );\\r\\n    }\\r\\n\\r\\n    function owner() public view override returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual override onlyOwner() {\\r\\n        emit OwnershipTransferred( _owner, address(0) );\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\\r\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred( _owner, newOwner_ );\\r\\n        _owner = newOwner_;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\r\\n        if (a > 3) {\\r\\n            c = a;\\r\\n            uint b = add( div( a, 2), 1 );\\r\\n            while (b < c) {\\r\\n                c = b;\\r\\n                b = div( add( div( a, b ), b), 2 );\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            c = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\\r\\n        return div( mul( total_, percentage_ ), 1000 );\\r\\n    }\\r\\n\\r\\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\\r\\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\\r\\n    }\\r\\n\\r\\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\\r\\n        return div( mul(part_, 100) , total_ );\\r\\n    }\\r\\n\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n\\r\\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\\r\\n        return sqrrt( mul( multiplier_, payment_ ) );\\r\\n    }\\r\\n\\r\\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\\r\\n      return mul( multiplier_, supply_ );\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToString(address _address) internal pure returns(string memory) {\\r\\n        bytes32 _bytes = bytes32(uint256(_address));\\r\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\r\\n        bytes memory _addr = new bytes(42);\\r\\n\\r\\n        _addr[0] = '0';\\r\\n        _addr[1] = 'x';\\r\\n\\r\\n        for(uint256 i = 0; i < 20; i++) {\\r\\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n\\r\\n        return string(_addr);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is IERC20 {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // TODO comment actual hash value.\\r\\n    bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \\\"ERC20Token\\\" );\\r\\n\\r\\n    mapping (address => uint256) internal _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n\\r\\n    string internal _symbol;\\r\\n\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n    _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n\\r\\n    function _mint(address account_, uint256 ammount_) internal virtual {\\r\\n        require(account_ != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address( this ), account_, ammount_);\\r\\n        _totalSupply = _totalSupply.add(ammount_);\\r\\n        _balances[account_] = _balances[account_].add(ammount_);\\r\\n        emit Transfer(address( this ), account_, ammount_);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\\r\\n}\\r\\n\\r\\ninterface IERC2612Permit {\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary Counters {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\r\\n        counter._value += 1;\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        counter._value = counter._value.sub(1);\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    mapping(address => Counters.Counter) private _nonces;\\r\\n\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainID;\\r\\n        assembly {\\r\\n            chainID := chainid()\\r\\n        }\\r\\n\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                keccak256(bytes(name())),\\r\\n                keccak256(bytes(\\\"1\\\")), // Version\\r\\n                chainID,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual override {\\r\\n        require(block.timestamp <= deadline, \\\"Permit: expired deadline\\\");\\r\\n\\r\\n        bytes32 hashStruct =\\r\\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\\r\\n\\r\\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\\r\\n\\r\\n        address signer = ecrecover(_hash, v, r, s);\\r\\n        require(signer != address(0) && signer == owner, \\\"ZeroSwapPermit: Invalid signature\\\");\\r\\n\\r\\n        _nonces[owner].increment();\\r\\n        _approve(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function nonces(address owner) public view override returns (uint256) {\\r\\n        return _nonces[owner].current();\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2ERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\\r\\nlibrary Babylonian {\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary BitMath {\\r\\n    // returns the 0 indexed position of the most significant bit of the input x\\r\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\r\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\r\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\r\\n\\r\\n        if (x >= 0x100000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            r += 128;\\r\\n        }\\r\\n        if (x >= 0x10000000000000000) {\\r\\n            x >>= 64;\\r\\n            r += 64;\\r\\n        }\\r\\n        if (x >= 0x100000000) {\\r\\n            x >>= 32;\\r\\n            r += 32;\\r\\n        }\\r\\n        if (x >= 0x10000) {\\r\\n            x >>= 16;\\r\\n            r += 16;\\r\\n        }\\r\\n        if (x >= 0x100) {\\r\\n            x >>= 8;\\r\\n            r += 8;\\r\\n        }\\r\\n        if (x >= 0x10) {\\r\\n            x >>= 4;\\r\\n            r += 4;\\r\\n        }\\r\\n        if (x >= 0x4) {\\r\\n            x >>= 2;\\r\\n            r += 2;\\r\\n        }\\r\\n        if (x >= 0x2) r += 1;\\r\\n    }\\r\\n\\r\\n    // returns the 0 indexed position of the least significant bit of the input x\\r\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\r\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\r\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\r\\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\\r\\n\\r\\n        r = 255;\\r\\n        if (x & uint128(-1) > 0) {\\r\\n            r -= 128;\\r\\n        } else {\\r\\n            x >>= 128;\\r\\n        }\\r\\n        if (x & uint64(-1) > 0) {\\r\\n            r -= 64;\\r\\n        } else {\\r\\n            x >>= 64;\\r\\n        }\\r\\n        if (x & uint32(-1) > 0) {\\r\\n            r -= 32;\\r\\n        } else {\\r\\n            x >>= 32;\\r\\n        }\\r\\n        if (x & uint16(-1) > 0) {\\r\\n            r -= 16;\\r\\n        } else {\\r\\n            x >>= 16;\\r\\n        }\\r\\n        if (x & uint8(-1) > 0) {\\r\\n            r -= 8;\\r\\n        } else {\\r\\n            x >>= 8;\\r\\n        }\\r\\n        if (x & 0xf > 0) {\\r\\n            r -= 4;\\r\\n        } else {\\r\\n            x >>= 4;\\r\\n        }\\r\\n        if (x & 0x3 > 0) {\\r\\n            r -= 2;\\r\\n        } else {\\r\\n            x >>= 2;\\r\\n        }\\r\\n        if (x & 0x1 > 0) r -= 1;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary FullMath {\\r\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm < l) h -= 1;\\r\\n    }\\r\\n\\r\\n    function fullDiv(\\r\\n        uint256 l,\\r\\n        uint256 h,\\r\\n        uint256 d\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 pow2 = d & -d;\\r\\n        d /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 d\\r\\n    ) internal pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n        uint256 mm = mulmod(x, y, d);\\r\\n        if (mm > l) h -= 1;\\r\\n        l -= mm;\\r\\n        require(h < d, 'FullMath::mulDiv: overflow');\\r\\n        return fullDiv(l, h, d);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // range: [0, 2**144 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq144x112 {\\r\\n        uint256 _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\r\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        return uq112x112(uint224(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // encodes a uint144 as a UQ144x112\\r\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\r\\n        return uq144x112(uint256(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\r\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\r\\n        return uint144(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n  function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n    // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n    // instead, get close to:\\r\\n    //  (x * 1e18) >> 112\\r\\n    // without risk of overflowing, e.g.:\\r\\n    //  (x) / 2 ** (112 - lg(1e18))\\r\\n    return uint(self._x) / 5192296858534827;\\r\\n  }\\r\\n\\r\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\r\\n    // reverts on overflow\\r\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\r\\n        uint256 z = 0;\\r\\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\\r\\n        return uq144x112(z);\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by an int and decode, returning an int\\r\\n    // reverts on overflow\\r\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\r\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\r\\n        require(z < 2**255, 'FixedPoint::muli: overflow');\\r\\n        return y < 0 ? -int256(z) : int256(z);\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\r\\n    // lossy\\r\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\r\\n        if (self._x == 0 || other._x == 0) {\\r\\n            return uq112x112(0);\\r\\n        }\\r\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\r\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\r\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\r\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\r\\n\\r\\n        // partial products\\r\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\r\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\r\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\r\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\r\\n\\r\\n        // so the bit shift does not overflow\\r\\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\\r\\n\\r\\n        // this cannot exceed 256 bits, all values are 224 bits\\r\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\r\\n\\r\\n        // so the cast does not overflow\\r\\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\\r\\n\\r\\n        return uq112x112(uint224(sum));\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\r\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\r\\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\\r\\n        if (self._x == other._x) {\\r\\n            return uq112x112(uint224(Q112));\\r\\n        }\\r\\n        if (self._x <= uint144(-1)) {\\r\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\r\\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\\r\\n            return uq112x112(uint224(value));\\r\\n        }\\r\\n\\r\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\r\\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\\r\\n        return uq112x112(uint224(result));\\r\\n    }\\r\\n\\r\\n  // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n  // equivalent to encode(numerator).div(denominator)\\r\\n  // function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n  //   require(denominator > 0, \\\"DIV_BY_ZERO\\\");\\r\\n  //   return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n  // }\\r\\n\\r\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\r\\n    // lossy if either numerator or denominator is greater than 112 bits\\r\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\r\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\r\\n\\r\\n        if (numerator <= uint144(-1)) {\\r\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\r\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\r\\n            return uq112x112(uint224(result));\\r\\n        } else {\\r\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\r\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\r\\n            return uq112x112(uint224(result));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // take the reciprocal of a UQ112x112\\r\\n    // reverts on overflow\\r\\n    // lossy\\r\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\\r\\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\\r\\n        return uq112x112(uint224(Q224 / self._x));\\r\\n    }\\r\\n\\r\\n    // square root of a UQ112x112\\r\\n    // lossy between 0/1 and 40 bits\\r\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        if (self._x <= uint144(-1)) {\\r\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\r\\n        }\\r\\n\\r\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\r\\n        safeShiftBits -= safeShiftBits % 2;\\r\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPrincipleDepository {\\r\\n\\r\\n    function getDepositorInfo( address _depositorAddress_ ) external view returns\\r\\n        ( uint principleValue_, uint paidOut_, uint maxPayout, uint vestingPeriod_ );\\r\\n\\r\\n    function depositBondPrinciple( uint256 amountToDeposit_ ) external returns ( bool );\\r\\n\\r\\n    function depositBondPrincipleWithPermit( uint256 amountToDeposit_, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external returns ( bool );\\r\\n\\r\\n    function redeemBond() external returns ( bool );\\r\\n\\r\\n    function calculatePercentVested( address depositor_ ) external view returns ( uint _percentVested );\\r\\n\\r\\n    function calculatePendingPayout( address depositor_ ) external view returns ( uint _pendingPayout );\\r\\n\\r\\n    function calculateBondInterest( uint principleValue_ ) external view returns ( uint maxPayout );\\r\\n\\r\\n    function calculatePremium() external view returns ( uint _premium );\\r\\n}\\r\\n\\r\\ninterface IBondingCalculator {\\r\\n    function principleValuation( address principleTokenAddress_, uint amountDeposited_ ) external view returns ( uint principleValuation_ );\\r\\n}\\r\\n\\r\\ninterface ITreasury {\\r\\n    function depositPrinciple( uint depositAmount_ ) external returns ( bool );\\r\\n}\\r\\n\\r\\ncontract TAOPrincipleDepository is IPrincipleDepository, Ownable {\\r\\n\\r\\n    using FixedPoint for *;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    struct DepositInfo {\\r\\n        uint principleValue; // Risk-Free Value of LP\\r\\n        uint payoutRemaining; // TAO remaining to be paid\\r\\n        uint lastBlock; // Last interaction\\r\\n        uint vestingPeriod; // Blocks left to vest\\r\\n    }\\r\\n\\r\\n    mapping( address => DepositInfo ) public depositorInfo;\\r\\n\\r\\n    uint public bondControlVariable; // Premium scaling variable\\r\\n    uint public vestingPeriodInBlocks;\\r\\n    uint public minPremium; // Floor for the premium\\r\\n\\r\\n    address public treasury;\\r\\n    address public bondCalculator;\\r\\n    address public principleToken; // TAO-DAI LP\\r\\n    address public TAO;\\r\\n\\r\\n    uint256 public totalDebt; // Total principle value of outstanding bonds\\r\\n\\r\\n    address public stakingContract;\\r\\n    address public DAOWallet;\\r\\n    address public RewardPool;\\r\\n    uint public DAOShare; // % = 1 / DAOShare\\r\\n    uint public LPShare; // % = 1 /LPShare\\r\\n\\r\\n    bool public isInitialized;\\r\\n\\r\\n    function initialize ( address principleToken_, address TAO_ ) external onlyOwner() returns ( bool ) {\\r\\n        require( isInitialized == false );\\r\\n        principleToken = principleToken_;\\r\\n        TAO = TAO_;\\r\\n\\r\\n        isInitialized = true;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setAddresses( address bondCalculator_, address treasury_, address stakingContract_, address RewardPool_,\\r\\n    address DAOWallet_, uint DAOShare_, uint LPShare_ ) external onlyOwner() returns ( bool ) {\\r\\n        bondCalculator = bondCalculator_;\\r\\n        treasury = treasury_;\\r\\n        stakingContract = stakingContract_;\\r\\n        RewardPool = RewardPool_;\\r\\n        DAOWallet = DAOWallet_;\\r\\n        DAOShare = DAOShare_;\\r\\n        LPShare = LPShare_;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setBondTerms( uint bondControlVariable_, uint vestingPeriodInBlocks_, uint minPremium_ )\\r\\n    external onlyOwner() returns ( bool ) {\\r\\n        bondControlVariable = bondControlVariable_;\\r\\n        vestingPeriodInBlocks = vestingPeriodInBlocks_;\\r\\n        minPremium = minPremium_;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getDepositorInfo( address depositorAddress_ ) external view override returns\\r\\n    ( uint _principleValue, uint _payoutRemaining, uint _lastBlock, uint _vestingPeriod ) {\\r\\n        DepositInfo memory depositorInfo_ = depositorInfo[ depositorAddress_ ];\\r\\n        _principleValue = depositorInfo_.principleValue;\\r\\n        _payoutRemaining = depositorInfo_.payoutRemaining;\\r\\n        _lastBlock = depositorInfo_.lastBlock;\\r\\n        _vestingPeriod = depositorInfo_.vestingPeriod;\\r\\n    }\\r\\n\\r\\n    function depositBondPrinciple( uint amountToDeposit_ ) external override returns ( bool ) {\\r\\n        _depositBondPrinciple( amountToDeposit_ ) ;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function depositBondPrincipleWithPermit( uint amountToDeposit_, uint deadline, uint8 v, bytes32 r, bytes32 s )\\r\\n    external override returns ( bool ) {\\r\\n        ERC20Permit( principleToken ).permit( msg.sender, address(this), amountToDeposit_, deadline, v, r, s );\\r\\n        _depositBondPrinciple( amountToDeposit_ ) ;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _depositBondPrinciple( uint amountToDeposit_ ) internal returns ( bool ){\\r\\n        IERC20( principleToken ).safeTransferFrom( msg.sender, address(this), amountToDeposit_ );\\r\\n\\r\\n        uint principleValue_ = IBondingCalculator( bondCalculator )\\r\\n            .principleValuation( principleToken, amountToDeposit_ ).div( 1e9 );\\r\\n\\r\\n        uint payout_ = _calculateBondInterest( principleValue_ );\\r\\n\\r\\n        require( payout_ >= 10000000, \\\"Bond too small\\\" );\\r\\n\\r\\n        totalDebt = totalDebt.add( principleValue_ );\\r\\n\\r\\n        uint profit_ = principleValue_.sub( payout_ );\\r\\n        uint DAOProfit_ = FixedPoint.fraction( profit_, DAOShare ).decode();\\r\\n        uint LPProfit_ = FixedPoint.fraction( profit_, LPShare ).decode();\\r\\n        uint stakingProfit_ = (profit_.sub( DAOProfit_ )).sub( LPProfit_ );\\r\\n\\r\\n        IUniswapV2ERC20( principleToken ).approve( address( treasury ), amountToDeposit_ );\\r\\n\\r\\n        ITreasury( treasury ).depositPrinciple( amountToDeposit_ ); // Returns TAO\\r\\n\\r\\n\\r\\n        IERC20( TAO ).safeTransfer( stakingContract, stakingProfit_);\\r\\n        IERC20( TAO ).safeTransfer( DAOWallet, DAOProfit_ );\\r\\n        IERC20( TAO ).safeTransfer( RewardPool, LPProfit_ );\\r\\n\\r\\n        depositorInfo[msg.sender] = DepositInfo({\\r\\n            principleValue: depositorInfo[msg.sender].principleValue.add( principleValue_ ),\\r\\n            payoutRemaining: depositorInfo[msg.sender].payoutRemaining.add( payout_ ),\\r\\n            lastBlock: block.number,\\r\\n            vestingPeriod: vestingPeriodInBlocks\\r\\n        });\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeemBond() external override returns ( bool ) {\\r\\n        uint payoutRemaining_ = depositorInfo[msg.sender].payoutRemaining;\\r\\n\\r\\n        require( payoutRemaining_ > 0, \\\"Sender is not due any interest.\\\" );\\r\\n\\r\\n        uint principleValue_ = depositorInfo[msg.sender].principleValue;\\r\\n\\r\\n        uint blocksSinceLast_ = block.number.sub( depositorInfo[msg.sender].lastBlock );\\r\\n\\r\\n        uint vestingPeriod_ = depositorInfo[msg.sender].vestingPeriod;\\r\\n\\r\\n        uint percentVested_ = _calculatePercentVested( msg.sender );\\r\\n\\r\\n        if ( percentVested_ >= 10000 ) {\\r\\n            delete depositorInfo[msg.sender];\\r\\n\\r\\n            IERC20( TAO ).safeTransfer( msg.sender, payoutRemaining_ );\\r\\n            totalDebt = totalDebt.sub( principleValue_ );\\r\\n\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        uint payout_ = payoutRemaining_.mul( percentVested_ ).div( 10000 );\\r\\n        IERC20( TAO ).safeTransfer( msg.sender, payout_ );\\r\\n\\r\\n        uint principleUsed_ = principleValue_.mul( percentVested_ ).div( 10000 );\\r\\n        totalDebt = totalDebt.sub( principleUsed_ );\\r\\n\\r\\n        depositorInfo[msg.sender] = DepositInfo({\\r\\n            principleValue: principleValue_.sub( principleUsed_ ),\\r\\n            payoutRemaining: payoutRemaining_.sub( payout_ ),\\r\\n            lastBlock: block.number,\\r\\n            vestingPeriod: vestingPeriod_.sub( blocksSinceLast_ )\\r\\n        });\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function calculatePercentVested( address depositor_ ) external view override returns ( uint _percentVested ) {\\r\\n        _percentVested = _calculatePercentVested( depositor_ );\\r\\n    }\\r\\n\\r\\n    // In thousandths ( 1 = 0.01% )\\r\\n    function _calculatePercentVested( address depositor_ ) internal view returns ( uint _percentVested ) {\\r\\n        uint blocksSinceLast_ = block.number.sub( depositorInfo[ depositor_ ].lastBlock );\\r\\n\\r\\n        uint vestingPeriod_ = depositorInfo[ depositor_ ].vestingPeriod;\\r\\n\\r\\n        if ( vestingPeriod_ > 0 ) {\\r\\n            _percentVested = blocksSinceLast_.mul( 10000 ).div( vestingPeriod_ );\\r\\n        } else {\\r\\n            _percentVested = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculatePendingPayout( address depositor_ ) external view override returns ( uint _pendingPayout ) {\\r\\n        uint percentVested_ = _calculatePercentVested( depositor_ );\\r\\n        uint payoutRemaining_ = depositorInfo[ depositor_ ].payoutRemaining;\\r\\n\\r\\n        _pendingPayout = payoutRemaining_.mul( percentVested_ ).div( 10000 );\\r\\n\\r\\n        if ( percentVested_ >= 10000 ) {\\r\\n            _pendingPayout = payoutRemaining_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateBondInterest( uint amountToDeposit_ ) external view override returns ( uint _interestDue ) {\\r\\n        uint principleValue_ = IBondingCalculator( bondCalculator ).principleValuation( principleToken, amountToDeposit_ ).div( 1e9 );\\r\\n        _interestDue = _calculateBondInterest( principleValue_ );\\r\\n    }\\r\\n\\r\\n    function _calculateBondInterest( uint principleValue_ ) internal view returns ( uint _interestDue ) {\\r\\n        _interestDue = FixedPoint.fraction( principleValue_, _calcPremium() ).decode112with18().div( 1e16 );\\r\\n    }\\r\\n\\r\\n    function calculatePremium() external view override returns ( uint _premium ) {\\r\\n        _premium = _calcPremium();\\r\\n    }\\r\\n\\r\\n    function _calcPremium() internal view returns ( uint _premium ) {\\r\\n        _premium = bondControlVariable.mul( _calcDebtRatio() ).add( uint(1000000000) ).div( 1e7 );\\r\\n        if ( _premium < minPremium ) {\\r\\n            _premium = minPremium;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calcDebtRatio() internal view returns ( uint _debtRatio ) {\\r\\n        _debtRatio = FixedPoint.fraction(\\r\\n            // Must move the decimal to the right by 9 places to avoid math underflow error\\r\\n            totalDebt.mul( 1e9 ),\\r\\n            IERC20( TAO ).totalSupply()\\r\\n        ).decode112with18().div( 1e18 );\\r\\n        // Must move the decimal tot he left 18 places to account for the 9 places added above and the 19 signnificant digits added by FixedPoint.\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0ea21bd5fe262a096c4701e0a499daefeb6ba9d8815757b5e74f40e3072796c\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806361d027b311610104578063cd3a2a3c116100a2578063ee99205c11610071578063ee99205c14610469578063eedb9ed514610471578063f2fde38b14610479578063fc7b9c181461049f576101cf565b8063cd3a2a3c14610434578063da6b5ab01461043c578063dfdb5ae414610444578063e08a01b41461044c576101cf565b80638b276c2c116100de5780638b276c2c146103d55780638da5cb5b146103fe578063c2ed626f14610406578063c5332b7c1461042c576101cf565b806361d027b3146103bb5780636fd6be35146103c3578063715018a6146103cb576101cf565b80633a709d2211610171578063485cc9551161014b578063485cc955146103455780635049b278146103735780635f20ac691461037b57806361cb2175146103b3576101cf565b80633a709d221461029f5780633d19d66b146102a757806343de6367146102f3576101cf565b806319c934bb116101ad57806319c934bb146102435780631bf6ba9f1461024b57806322d6357a14610271578063392e53cd14610297576101cf565b8063013f2beb146101d45780630897821f146101ee57806316e178521461021f575b600080fd5b6101dc6104a7565b60408051918252519081900360200190f35b61020b6004803603602081101561020457600080fd5b50356104ad565b604080519115158252519081900360200190f35b6102276104c1565b604080516001600160a01b039092168252519081900360200190f35b6102276104d0565b6101dc6004803603602081101561026157600080fd5b50356001600160a01b03166104df565b6101dc6004803603602081101561028757600080fd5b50356001600160a01b03166104f0565b61020b610548565b6101dc610551565b6102cd600480360360208110156102bd57600080fd5b50356001600160a01b0316610560565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61020b600480360360e081101561030957600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a08101359060c00135610588565b61020b6004803603604081101561035b57600080fd5b506001600160a01b0381358116916020013516610644565b61020b6106e2565b61020b600480360360a081101561039157600080fd5b5080359060208101359060ff60408201351690606081013590608001356108c2565b6101dc610966565b61022761096c565b61022761097b565b6103d361098a565b005b61020b600480360360608110156103eb57600080fd5b5080359060208101359060400135610a21565b610227610a81565b6102cd6004803603602081101561041c57600080fd5b50356001600160a01b0316610a90565b610227610af7565b6101dc610b06565b6101dc610b0c565b610227610b12565b6101dc6004803603602081101561046257600080fd5b5035610b21565b610227610bcb565b6101dc610bda565b6103d36004803603602081101561048f57600080fd5b50356001600160a01b0316610be0565b6101dc610ccd565b600e5481565b60006104b882610cd3565b50600192915050565b6008546001600160a01b031681565b600c546001600160a01b031681565b60006104ea8261100d565b92915050565b6000806104fc8361100d565b6001600160a01b0384166000908152600160208190526040909120015490915061053261271061052c838561107c565b906110d5565b92506127108210610541578092505b5050919050565b600f5460ff1681565b600061055b611117565b905090565b6001602081905260009182526040909120805491810154600282015460039092015490919084565b600080546001600160a01b031633146105d6576040805162461bcd60e51b81526020600482018190526024820152600080516020611a35833981519152604482015290519081900360640190fd5b50600680546001600160a01b03199081166001600160a01b03998a161790915560058054821697891697909717909655600a8054871695881695909517909455600c8054861693871693909317909255600b8054909416941693909317909155600d91909155600e55600190565b600080546001600160a01b03163314610692576040805162461bcd60e51b81526020600482018190526024820152600080516020611a35833981519152604482015290519081900360640190fd5b600f5460ff16156106a257600080fd5b50600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055600f805460ff1916600190811790915590565b3360009081526001602081905260408220015480610747576040805162461bcd60e51b815260206004820152601f60248201527f53656e646572206973206e6f742064756520616e7920696e7465726573742e00604482015290519081900360640190fd5b336000908152600160205260408120805460029091015490919061076c904390611155565b336000818152600160205260408120600301549293509061078c9061100d565b905061271081106107f457336000818152600160208190526040822082815590810182905560028101829055600301556008546107d5916001600160a01b039091169087611197565b6009546107e29085611155565b60095550600194506108bf9350505050565b600061080661271061052c888561107c565b600854909150610820906001600160a01b03163383611197565b600061083261271061052c888661107c565b6009549091506108429082611155565b60095560408051608081019091528061085b8884611155565b815260200161086a8985611155565b815243602082015260400161087f8688611155565b9052336000908152600160208181526040928390208451815590840151818301559183015160028301556060909201516003909101559750505050505050505b90565b6007546040805163d505accf60e01b8152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905290516000926001600160a01b03169163d505accf9160e4808301928692919082900301818387803b15801561093857600080fd5b505af115801561094c573d6000803e3d6000fd5b5050505061095986610cd3565b5060019695505050505050565b600d5481565b6005546001600160a01b031681565b6007546001600160a01b031681565b6000546001600160a01b031633146109d7576040805162461bcd60e51b81526020600482018190526024820152600080516020611a35833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080546001600160a01b03163314610a6f576040805162461bcd60e51b81526020600482018190526024820152600080516020611a35833981519152604482015290519081900360640190fd5b50600292909255600355600455600190565b6000546001600160a01b031690565b600080600080610a9e61198d565b505050506001600160a01b03919091166000908152600160208181526040928390208351608081018552815480825293820154928101839052600282015494810185905260039091015460609091018190529194909350565b6006546001600160a01b031681565b60035481565b60025481565b600b546001600160a01b031681565b6006546007546040805163fb452dc160e01b81526001600160a01b0392831660048201526024810185905290516000938493610bb993633b9aca0093919092169163fb452dc1916044808301926020929190829003018186803b158015610b8757600080fd5b505afa158015610b9b573d6000803e3d6000fd5b505050506040513d6020811015610bb157600080fd5b5051906110d5565b9050610bc4816111ee565b9392505050565b600a546001600160a01b031681565b60045481565b6000546001600160a01b03163314610c2d576040805162461bcd60e51b81526020600482018190526024820152600080516020611a35833981519152604482015290519081900360640190fd5b6001600160a01b038116610c725760405162461bcd60e51b81526004018080602001828103825260268152602001806119c86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60095481565b600754600090610cee906001600160a01b0316333085611214565b6006546007546040805163fb452dc160e01b81526001600160a01b039283166004820152602481018690529051600093610d5193633b9aca009391169163fb452dc191604480820192602092909190829003018186803b158015610b8757600080fd5b90506000610d5e826111ee565b905062989680811015610da9576040805162461bcd60e51b815260206004820152600e60248201526d109bdb99081d1bdbc81cdb585b1b60921b604482015290519081900360640190fd5b600954610db69083611274565b6009556000610dc58383611155565b90506000610ddd610dd883600d546112ce565b611445565b6001600160701b031690506000610df9610dd884600e546112ce565b6001600160701b031690506000610e1a82610e148686611155565b90611155565b6007546005546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018d9052905193945091169163095ea7b3916044808201926020929091908290030181600087803b158015610e7557600080fd5b505af1158015610e89573d6000803e3d6000fd5b505050506040513d6020811015610e9f57600080fd5b5050600554604080516354b6dced60e01b8152600481018b905290516001600160a01b03909216916354b6dced916024808201926020929091908290030181600087803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b505050506040513d6020811015610f1957600080fd5b5050600a54600854610f38916001600160a01b03918216911683611197565b600b54600854610f55916001600160a01b03918216911685611197565b600c54600854610f72916001600160a01b03918216911684611197565b60408051608081018252336000908152600160205291909120548190610f989089611274565b81523360009081526001602081815260409092200154910190610fbb9088611274565b8152436020808301919091526003805460409384015233600090815260018084529084902085518155928501518382015592840151600283015560609093015192019190915598975050505050505050565b6001600160a01b0381166000908152600160205260408120600201548190611036904390611155565b6001600160a01b03841660009081526001602052604090206003015490915080156110725761106b8161052c8461271061107c565b9250610541565b5060009392505050565b60008261108b575060006104ea565b8282028284828161109857fe5b0414610bc45760405162461bcd60e51b8152600401808060200182810382526021815260200180611a146021913960400191505060405180910390fd5b6000610bc483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611455565b60006111426298968061052c633b9aca0061113c6111336114f7565b6002549061107c565b90611274565b90506004548110156108bf575060045490565b6000610bc483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506115a3565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111e99084906115fd565b505050565b60006104ea662386f26fc1000061052c61120f8561120a611117565b6112ce565b6116ae565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261126e9085906115fd565b50505050565b600082820183811015610bc4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6112d66119b5565b600082116113155760405162461bcd60e51b81526004018080602001828103825260268152602001806119ee6026913960400191505060405180910390fd5b8261132f57506040805160208101909152600081526104ea565b71ffffffffffffffffffffffffffffffffffff83116113d657600082607085901b8161135757fe5b0490506001600160e01b038111156113b6576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506104ea565b60006113e784600160701b856116c6565b90506001600160e01b038111156113b6576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b5160701c6001600160701b031690565b600081836114e15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114a657818101518382015260200161148e565b50505050905090810190601f1680156114d35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816114ed57fe5b0495945050505050565b600061055b670de0b6b3a764000061052c61120f611524633b9aca0060095461107c90919063ffffffff16565b600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157257600080fd5b505afa158015611586573d6000803e3d6000fd5b505050506040513d602081101561159c57600080fd5b50516112ce565b600081848411156115f55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156114a657818101518382015260200161148e565b505050900390565b6060611652826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117669092919063ffffffff16565b8051909150156111e95780806020019051602081101561167157600080fd5b50516111e95760405162461bcd60e51b815260040180806020018281038252602a815260200180611a55602a913960400191505060405180910390fd5b516612725dd1d243ab6001600160e01b039091160490565b60008060006116d5868661177d565b91509150600084806116e357fe5b8688099050828111156116f7576001820391505b8083039250848210611750576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b61175b8383876117aa565b979650505050505050565b6060611775848460008561181a565b949350505050565b60008080600019848609905083850292508281039150828110156117a2576001820391505b509250929050565b600081810382168083816117ba57fe5b0492508085816117c657fe5b0494508081600003816117d557fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b606061182585611987565b611876576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106118b55780518252601f199092019160209182019101611896565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611917576040519150601f19603f3d011682016040523d82523d6000602084013e61191c565b606091505b509150915081156119305791506117759050565b8051156119405780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156114a657818101518382015260200161148e565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160208101909152600081529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212208e66a140558da9b16f0601f54c2b2181e3f078e361c84446aa5c552f10d4c6b264736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3451,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "depositorInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(DepositInfo)3447_storage)"
      },
      {
        "astId": 3453,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "bondControlVariable",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3455,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "vestingPeriodInBlocks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3457,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "minPremium",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3459,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3461,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "bondCalculator",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3463,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "principleToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3465,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "TAO",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3467,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "totalDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3469,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "stakingContract",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3471,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "DAOWallet",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3473,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "RewardPool",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3475,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "DAOShare",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3477,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "LPShare",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3479,
        "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
        "label": "isInitialized",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(DepositInfo)3447_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TAOPrincipleDepository.DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)3447_storage"
      },
      "t_struct(DepositInfo)3447_storage": {
        "encoding": "inplace",
        "label": "struct TAOPrincipleDepository.DepositInfo",
        "members": [
          {
            "astId": 3440,
            "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
            "label": "principleValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3442,
            "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
            "label": "payoutRemaining",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3444,
            "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
            "label": "lastBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3446,
            "contract": "contracts/Bonding/TAOPrincipleDepository.sol:TAOPrincipleDepository",
            "label": "vestingPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}